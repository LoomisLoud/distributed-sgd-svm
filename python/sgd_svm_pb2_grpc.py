# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sgd_svm_pb2 as sgd__svm__pb2


class SGDSVMStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getDataLabels = channel.unary_stream(
        '/sgdsvm.SGDSVM/getDataLabels',
        request_serializer=sgd__svm__pb2.Auth.SerializeToString,
        response_deserializer=sgd__svm__pb2.Data.FromString,
        )
    self.auth = channel.unary_unary(
        '/sgdsvm.SGDSVM/auth',
        request_serializer=sgd__svm__pb2.Empty.SerializeToString,
        response_deserializer=sgd__svm__pb2.Auth.FromString,
        )
    self.sendGradientUpdate = channel.unary_unary(
        '/sgdsvm.SGDSVM/sendGradientUpdate',
        request_serializer=sgd__svm__pb2.GradientUpdate.SerializeToString,
        response_deserializer=sgd__svm__pb2.Empty.FromString,
        )
    self.getWeights = channel.unary_unary(
        '/sgdsvm.SGDSVM/getWeights',
        request_serializer=sgd__svm__pb2.Auth.SerializeToString,
        response_deserializer=sgd__svm__pb2.Weights.FromString,
        )
    self.sendEvalUpdate = channel.unary_unary(
        '/sgdsvm.SGDSVM/sendEvalUpdate',
        request_serializer=sgd__svm__pb2.EvalUpdate.SerializeToString,
        response_deserializer=sgd__svm__pb2.Empty.FromString,
        )
    self.sendDoneComputing = channel.unary_unary(
        '/sgdsvm.SGDSVM/sendDoneComputing',
        request_serializer=sgd__svm__pb2.Auth.SerializeToString,
        response_deserializer=sgd__svm__pb2.Empty.FromString,
        )
    self.shouldWaitSynchronousOrNot = channel.unary_unary(
        '/sgdsvm.SGDSVM/shouldWaitSynchronousOrNot',
        request_serializer=sgd__svm__pb2.Auth.SerializeToString,
        response_deserializer=sgd__svm__pb2.Answer.FromString,
        )


class SGDSVMServicer(object):
  """Interface exported by the server.
  """

  def getDataLabels(self, request, context):
    """Asks the server for data and labels
    if the client is authorized, server answers
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def auth(self, request, context):
    """Authenticating to the server, succeeds
    if the server can still accept connections
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def sendGradientUpdate(self, request, context):
    """Sends the computed gradient update to the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getWeights(self, request, context):
    """Asks the new weights from the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def sendEvalUpdate(self, request, context):
    """Sends the computed evaluation update to the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def sendDoneComputing(self, request, context):
    """Tells the server that the client is done computing
    for the current job
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def shouldWaitSynchronousOrNot(self, request, context):
    """Asks the server if the client should wait or not
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SGDSVMServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getDataLabels': grpc.unary_stream_rpc_method_handler(
          servicer.getDataLabels,
          request_deserializer=sgd__svm__pb2.Auth.FromString,
          response_serializer=sgd__svm__pb2.Data.SerializeToString,
      ),
      'auth': grpc.unary_unary_rpc_method_handler(
          servicer.auth,
          request_deserializer=sgd__svm__pb2.Empty.FromString,
          response_serializer=sgd__svm__pb2.Auth.SerializeToString,
      ),
      'sendGradientUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.sendGradientUpdate,
          request_deserializer=sgd__svm__pb2.GradientUpdate.FromString,
          response_serializer=sgd__svm__pb2.Empty.SerializeToString,
      ),
      'getWeights': grpc.unary_unary_rpc_method_handler(
          servicer.getWeights,
          request_deserializer=sgd__svm__pb2.Auth.FromString,
          response_serializer=sgd__svm__pb2.Weights.SerializeToString,
      ),
      'sendEvalUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.sendEvalUpdate,
          request_deserializer=sgd__svm__pb2.EvalUpdate.FromString,
          response_serializer=sgd__svm__pb2.Empty.SerializeToString,
      ),
      'sendDoneComputing': grpc.unary_unary_rpc_method_handler(
          servicer.sendDoneComputing,
          request_deserializer=sgd__svm__pb2.Auth.FromString,
          response_serializer=sgd__svm__pb2.Empty.SerializeToString,
      ),
      'shouldWaitSynchronousOrNot': grpc.unary_unary_rpc_method_handler(
          servicer.shouldWaitSynchronousOrNot,
          request_deserializer=sgd__svm__pb2.Auth.FromString,
          response_serializer=sgd__svm__pb2.Answer.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sgdsvm.SGDSVM', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
